// config.ts
import dotenv from 'dotenv';

// Load environment variables from .env file
dotenv.config();

export interface Config {
  nodeEnv: string;
  port: number;
  mongo: {
    uri: string;
  };
  notification: {
    maxRetries: number;
    retryInterval: number;
  };
  providers: {
    email: {
      apiKey: string;
      from: string;
    };
    sms: {
      accountSid: string;
      authToken: string;
      from: string;
    };
    inApp: {
      enabled: boolean;
    };
  };
  rabbitmq: {
    exchangeName(exchangeName: any, arg1: string, arg2: { durable: true; }): unknown;
    url: string;
    exchanges: {
      notifications: string;
    };
    queues: {
      notifications: string;
      failedNotifications: string;
    };
  };
}

export const config: Config = {
  // Add nodeEnv property
  nodeEnv: process.env.NODE_ENV || 'development',
  port: parseInt(process.env.PORT || '3000', 10),
  mongo: {
    uri: process.env.MONGO_URI || 'mongodb://localhost:27017/notification_service'
  },
  notification: {
    maxRetries: parseInt(process.env.NOTIFICATION_MAX_RETRIES || '3', 10),
    retryInterval: parseInt(process.env.NOTIFICATION_RETRY_INTERVAL || '60000', 10) // 1 minute in milliseconds
  },
  providers: {
    email: {
      apiKey: process.env.EMAIL_API_KEY || '',
      from: process.env.EMAIL_FROM || 'noreply@example.com'
    },
    sms: {
      accountSid: process.env.SMS_ACCOUNT_SID || '',
      authToken: process.env.SMS_AUTH_TOKEN || '',
      from: process.env.SMS_FROM || ''
    },
    inApp: {
      enabled: process.env.ENABLE_IN_APP_NOTIFICATIONS === 'true'
    }
  },
  rabbitmq: {
      url: process.env.RABBITMQ_URL || 'amqp://localhost:5672',
      exchanges: {
          notifications: 'notifications'
      },
      queues: {
          notifications: 'notifications',
          failedNotifications: 'failed_notifications'
      },
      exchangeName: function (exchangeName: any, arg1: string, arg2: { durable: true; }): unknown {
          throw new Error('Function not implemented.');
      }
  }
};
