
import { config } from "typescript/config";
import { INotification } from "typescript/notification";

export class EmailProvider {
  private readonly failureRate: number;

  constructor(failureRate = 0.1) {
    this.failureRate = failureRate;
  }

  async send(notification: INotification): Promise<boolean> {
    try {
      console.info(`[EmailProvider] Sending email to user ${notification.userId}`);
      console.info(`[EmailProvider] From: ${config.providers.email.from}`);
      console.info(`[EmailProvider] Subject: ${notification.title}`);
      console.info(`[EmailProvider] Content: ${notification.content}`);
      
      await this.mockEmailSending();
      return true;

    } catch (error: any) {
      console.error('[EmailProvider] Error sending email:', error?.message || error);
      return false;
    }
  }

  private async mockEmailSending(): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 500));

    // Simulated failure
    if (Math.random() < this.failureRate) {
      throw new Error('Mock email sending failed');
    }
  }
}
