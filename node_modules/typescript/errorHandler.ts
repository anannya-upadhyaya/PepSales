import { Request, Response, NextFunction } from 'express';

// Define a custom error class with status code
export class AppError extends Error {
  statusCode: number;
  
  constructor(message: string, statusCode: number = 500) {
    super(message);
    this.statusCode = statusCode;
    
    // Maintain proper stack trace
    Error.captureStackTrace(this, this.constructor);
  }
}

// Express error handler middleware with the EXACT signature required by Express
export const errorHandler = (
  err: Error | AppError,
  req: Request,
  res: Response,
  next: NextFunction
): void => {
  console.error('Error occurred:', err);
  
  // Default error status and message
  let statusCode = 500;
  let message = 'Internal server error';
  
  // If it's our custom error with status code
  if ('statusCode' in err) {
    statusCode = err.statusCode;
  }
  
  message = err.message || message;
  
  // Send error response
  res.status(statusCode).json({
    status: 'error',
    message,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
  });
};