import mongoose, { Schema, Document, model, Types } from 'mongoose';

export enum NotificationType {
  EMAIL = 'EMAIL',
  SMS = 'SMS',
  IN_APP = 'IN_APP'
}

export enum NotificationStatus {
  PENDING = 'PENDING',
  SENT = 'SENT',
  RETRYING = 'RETRYING',
  FAILED = 'FAILED'
}

export interface INotification {
  userId: string;
  type: NotificationType;
  title: string;
  content: string;
  metadata?: Record<string, any>;
  status: NotificationStatus;
  retryCount: number;
  sentAt?: Date;
  createdAt?: Date;
  updatedAt?: Date;
}

export type INotificationDocument = Document<Types.ObjectId, {}, INotification> & INotification;

export interface CreateNotificationDto {
  userId: string;
  type: NotificationType;
  title: string;
  content: string;
  metadata?: Record<string, any>;
}

export interface NotificationResponseDto {
  id: string;
  userId: string;
  type: NotificationType;
  title: string;
  content: string;
  status: NotificationStatus;
  createdAt?: Date;
  sentAt?: Date;
}

const NotificationSchema = new Schema<INotificationDocument>({
  userId: { type: String, required: true },
  type: { type: String, enum: Object.values(NotificationType), required: true },
  title: { type: String, required: true },
  content: { type: String, required: true },
  metadata: { type: Object },
  status: { type: String, enum: Object.values(NotificationStatus), required: true, default: NotificationStatus.PENDING },
  retryCount: { type: Number, default: 0 },
  sentAt: { type: Date }
}, {
  timestamps: true
});

export const Notification = model<INotificationDocument>('Notification', NotificationSchema);
